---
slug: /image-optimisation
title: Image Optimisation via Vite ImageTools
description: This project includes Vite ImageTools for image optimisation. I've also included some examples of how I like to process images.
date: '2021-05-28'
alt: 'closeup of budding rose'
focus: 'center'
---

<script context="module">
 // Import image info for thumbnails
   import meta from './plant2.jpg?width=288&metadata';
   const {src, width, height} = meta;
   import placeholder from './plant2.jpg?w=10&blur=10&quality=5';
   import srcset from './plant2.jpg?w=288;576;900;1280;1920&format=webp;jpg&srcset&quality=80';
   import shareImage from './plant2.jpg?width=1280&quality=80'
   
   // Add image info to post metadata
   metadata.srcset = srcset;
   metadata.imageSrc = src;
   metadata.placeholder = placeholder;
   metadata.dominantColor = '#4a552f';
   metadata.imageWidth = Math.round(width);
   metadata.imageHeight = Math.round(height);

	import SEO from '$lib/components/SEO.svelte';
	import Image from '$lib/components/Image.svelte';
</script>

<SEO title={`${title}`} {description} slug={`/blog${slug}/`} image={shareImage} ogImageWidth={width} ogImageHeight={height} ogImageAlt={alt} twitterImage={shareImage} twitterImageAlt={alt} />

<div class="layout">

<h1 class="fs-5 ta-c">{title}</h1>

<div class="imageContainer">
<Image {srcset} {src} {width} {height} {alt} {placeholder} />
</div>

This project includes [Vite ImageTools](https://github.com/JonasKruckenberg/imagetools/tree/main/packages/vite) for image optimisation. It's a great way to reduce transfer size and improve performance for images in SvelteKit projects.

To generate optimised images, you need to import image files with a query string that provides instructions about sizing, formats, transformations, etc - here's an example of what that might look like:

```svelte
<script context="module">
	import srcset from './plant2.jpg?w=288;576;900;1280;1920&format=webp;jpg&srcset&quality=80';
</script>
```

## A SvelteKit Image Component

There's an Image Component in this project. It accepts values generated by Vite ImageTools and uses [Svelte Actions](https://svelte.dev/tutorial/actions) to handle lazy loading and provide smooth transitions from placeholders to full size images once loading is complete.

If you're interested, you can view the Image Component, createLoadObserver script, and inViewSimple script to see how the Actions work. Otherwise, here's an example of how to import optimised files from Vite ImageTools and add to an instance of the Image Component:

```svelte
<script context="module">
	import imageMeta from '$static/images/imageFile.jpg?width=288&metadata';
	const { imageSrc, imageWidth, imageHeight } = imageMeta;
	import imagePlaceholder from '$static/images/imageFile.jpg?w=10&blur=10&quality=5';
	import imageSrcset from '$static/images/imageFile.jpg?w=288;576;900;1280;1920&format=webp;jpg&srcset&quality=80';
</script>

<Image
		srcset={bannerSrcset}
		src={bannerSrc}
		width={bannerWidth}
		height={bannerHeight}
		alt="closeup of a leaf"
		placeholder={bannerPlaceholder}
/>

```

You can also use the Image Component in conjunction with functionality provided by mdsvex to have optimised images associated with dynamic content like blog posts. You can read about it in the <a sveltekit:prefetch href="/blog/loading-posts"> post about using posts as data in this project</a>.

</div>

<style>
    .layout {
		padding: var(--s-sm) 0 var(--s-c1);
		display: grid;
		grid-template-columns:
			minmax(1.2rem, 1fr)
			minmax(auto, 65ch)
			minmax(1.2rem, 1fr);
        max-width: 100ch;
        margin: auto;
	}

	.layout > * {
		grid-column: 2;
	}

	.layout > pre, .layout > img, .layout > pre, .layout > .imageContainer {
		grid-column: 1 / 4;
	}

	.layout > * + * {
		margin-top: 2rem;
	}	
</style>
