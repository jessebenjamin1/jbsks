---
slug: /loading-posts
title: Loading Posts as Data
description: SvelteKit supports loading data at build time for static output. This project uses .svx files in the filesystem as a data source.
date: '2021-06-28'
alt: closeup of two mugs
focus: center
---

<script context="module">
	// Import image info for thumbnails
   import meta from './mugs.jpg?width=288&metadata';
   const {src, width, height} = meta;
   import placeholder from './mugs.jpg?w=10&blur=10&quality=5';
   import srcset from './mugs.jpg?w=288;576;900;1280;1920&format=webp;jpg&srcset&quality=80';
   import shareImage from './mugs.jpg?width=1280&quality=80'
   
   // Add image info to post metadata
   metadata.srcset = srcset;
   metadata.imageSrc = src;
   metadata.placeholder = placeholder;
   metadata.imageWidth = Math.round(width);
   metadata.imageHeight = Math.round(height);

	import SEO from '$lib/components/SEO.svelte';
	import Image from '$lib/components/Image.svelte';
</script>

<SEO title={`${title}`} {description} slug={`/blog${slug}/`} image={shareImage} ogImageWidth={width} ogImageHeight={height} ogImageAlt={alt} twitterImage={shareImage} twitterImageAlt={alt} />

<div class="layout">

<h1 class="fs-5 ta-c">{title}</h1>

<div class="imageContainer">
<Image {srcset} {src} {width} {height} {alt} {placeholder} />
</div>

SvelteKit supports loading data at build time for static output. This project uses .svx files in the filesystem as a data source which are accessed via <code>/blog/index.json.js</code>.

Here's the code that gets the 3 most recent posts on the homepage of this site:

```svelte
<script context="module">
	export async function load({ fetch }) {
		const allPosts = await fetch('/blog.json').then((res) => res.json());
		const posts = allPosts.slice(0, 3);
		return {
			props: {
				posts
			}
		};
	}
</script>

<script>
	export let posts;
</script>

```

## Image Data

It's really common for dynamic content to have associated images, like the featured images associated with each of the blog posts on this site. To make this happen, you can make use of the <code>metadata</code> object export by every .svx file. You can add data as frontmatter like regular markdown, but you can also add properties to the <code>metadata</code> object. This makes it possible to set optimised images generated by Vite ImageTools as data for each of the blog posts on this site.

Here's what mixing frontmatter values with additions to the metadata object looks like:

```svelte
---
slug: /loading-posts
title: Loading Posts as Data
description: SvelteKit supports loading data at build time for static output. This project uses .svx files in the filesystem as a data source.
date: '2021-05-28'
alt: closeup of two mugs
focus: center
---

<script context="module">
	// Import image info for thumbnails
   import meta from './mugs.jpg?width=288&metadata';
   const {src, width, height} = meta;
   import placeholder from './mugs.jpg?w=10&blur=10&quality=5';
   import srcset from './mugs.jpg?w=288;576;900;1280;1920&format=webp;jpg&srcset&quality=80';
   import shareImage from './mugs.jpg?width=1280&quality=80'

   // Add image info to post metadata
   metadata.srcset = srcset;
   metadata.imageSrc = src;
   metadata.placeholder = placeholder;
   metadata.imageWidth = Math.round(width);
   metadata.imageHeight = Math.round(height);
</script>
```

You can also use this data dynamically fill out the Image Component in this project to easily handle lazy loading and smooth transitions from placeholders to full size images. There's also a <a sveltekit:prefetch href="/blog/image-optimisation"> post about image optimisation in this project</a>.

</div>

<style>
    .layout {
		padding: var(--s-sm) 0 var(--s-c1);
		display: grid;
		grid-template-columns:
			minmax(1.2rem, 1fr)
			minmax(auto, 65ch)
			minmax(1.2rem, 1fr);
        max-width: 100ch;
        margin: auto;
	}

	.layout > * {
		grid-column: 2;
	}

	.layout > pre, .layout > img, .layout > pre, .layout > .imageContainer {
		grid-column: 1 / 4;
	}

	.layout > * + * {
		margin-top: 2rem;
	}	
</style>
